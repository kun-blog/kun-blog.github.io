(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{364:function(s,a,t){"use strict";t.r(a);var n=t(0),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"接口自动化测试持续集成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口自动化测试持续集成"}},[s._v("#")]),s._v(" 接口自动化测试持续集成")]),s._v(" "),a("blockquote",[a("p",[a("strong",[a("code",[s._v("Postman + Newman + Git+ Jenkins +钉钉")])])])]),s._v(" "),a("h2",{attrs:{id:"接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[s._v("#")]),s._v(" 接口")]),s._v(" "),a("h3",{attrs:{id:"接口的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口的定义"}},[s._v("#")]),s._v(" 接口的定义")]),s._v(" "),a("p",[s._v("两个不同的系统或者一个系统中两个不同的功能，它们之间相互 连接的部分称为接口。 在软件测试中 ， 常 说 的 接 口 一 般 有 两 种 ： 图 形 用 户 接 口 （Graphical User Interface，GUI），它是人与程序的接口；应用程 序编程接口（Application Programma Interface，API），本书中提 到的接口特指API。 API是一组定义、程序及协议的集合，API可实现计算机软件之间 的相互通信。API的一个主要功能是提供通用功能集。程序员通过使用 API函数开发应用程序，从而可以避免编写无用程序，减轻编程任务。 很多公司将开发岗位分为前端工程师和后端工程师，他们之间相互配 合完成工作。一般来说，他们会协商接口的定义方式，其中一方定义 接口（一般由后端工程师定义接口），另一方来调用接口，以实现预 期功能。 前后端分离是近年来Web应用开发的一个发展趋势。这种模式具有 以下优势。")]),s._v(" "),a("p",[s._v("① 后端工程师不用精通前端技术（如HTML、JavaScript或 CSS），只专注于数据的处理，对外提供API即可。")]),s._v(" "),a("p",[s._v("② 前端工程师的专业性越来越强，其通过API获取数据，并专注 于页面设计。")]),s._v(" "),a("p",[s._v("③ 前后端分离可扩大接口的应用范围，开发的接口可以应用到 Web页面上，也可以应用到App上。")]),s._v(" "),a("h3",{attrs:{id:"接口的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口的分类"}},[s._v("#")]),s._v(" 接口的分类")]),s._v(" "),a("p",[s._v("依据所遵循协议的不同，常见接口可以分为以下3类。")]),s._v(" "),a("p",[s._v("（1）HTTP接口，它是基于超文本传输协议（HyperText Transfer Protocol，HTTP）开发的接口，但并不能排除没有使用其他协议。")]),s._v(" "),a("p",[s._v("（2）Web Service接口，它是系统对外的接口，比如你要从别的 网站或服务器上获取资源，一般来说，别人不会把数据库共享给你， 他们会提供一个他们写好的方法，让你用来获取数据，你使用他们写 好的方法就能引用他们提供的接口，从而达到同步数据的目的。")]),s._v(" "),a("p",[s._v("（3）RESTful接口，简称为REST，其描述了一个架构样式的网络 系统，核心是面向资源。REST专门针对网络应用设计和开发方式，降 低开发的复杂性，提高系统的可伸缩性。 基于浏览器/服务器模式（Brower/Server，B/S）的软件系统接口 大多数为HTTP接口，因此，本书将重点介绍HTTP接口的测试方法。要测试HTTP接口，首先需要了解HTTP、HTTP请求和响应的相关知识。")]),s._v(" "),a("h2",{attrs:{id:"接口文档系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口文档系统"}},[s._v("#")]),s._v(" 接口文档系统")]),s._v(" "),a("p",[s._v("由于前后端分离，用传统的Word文件来 维护接口文档的方式已经不合时宜，现在，越来越多的团队采用API文 档工具来维护接口信息。本节将详细介绍一个维护接口文档的在线系 统。")]),s._v(" "),a("h3",{attrs:{id:"showdoc简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#showdoc简介"}},[s._v("#")]),s._v(" ShowDoc简介")]),s._v(" "),a("p",[s._v("目前，有很多维护API文档的工具，本书选择ShowDoc，主要因为")]),s._v(" "),a("p",[s._v("ShowDoc有以下特点。\n① ShowDoc是一个开源、免费的工具。")]),s._v(" "),a("p",[s._v("② ShowDoc是一个非常适合IT团队的在线API文档、技术文档工具，它可实现实时同步，用户无须花费过多的精力维护文档。")]),s._v(" "),a("p",[s._v("③ 借助ShowDoc可以方便、快速地编写出美观的API文档，并且还可以用它编辑数据字典、说明书和一些技术规范说明文档供团队查阅")]),s._v(" "),a("p",[s._v("④ ShowDoc提供免费在线文档托管服务，用户可以通过ShowDoc官网创建自己的项目，并将其保存在云端，也可以选择将ShowDoc部署到\n本地服务器。")]),s._v(" "),a("h3",{attrs:{id:"showdoc部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#showdoc部署"}},[s._v("#")]),s._v(" ShowDoc部署")]),s._v(" "),a("p",[s._v("在别人服务器上还是不安全。")]),s._v(" "),a("p",[s._v("从安全角度进行考虑，毕竟接口文档不适合暴露在 “众目睽睽之下”，下面主要讲解如何在本地服务器上部署ShowDoc。 ShowDoc有很多种部署方式，下面以在Docker中部署为例。 这里假设服务器操作系统为CentOS 7。")]),s._v(" "),a("p",[s._v("（1）安装Docker 登录本地服务器，切换到root用户，使用以下命令进行安装。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("（2）启动Docker服务 启动命令如下所示。")]),s._v(" "),a("p",[s._v("service docker start")]),s._v(" "),a("p",[s._v("（3）设置Docker服务为开机启动 设置命令如下所示。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chkconfig")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" on \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("（4）借助yum命令，安装git 安装命令如下所示。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("（5）安装ShowDoc 从GitHub上复制代码到本地某个目录，这里进入根目录下的test 文件夹。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /test "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-o")]),s._v(" gitbug https://github.com/star7th/showdoc \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("（6）进入ShowDoc目录开始安装")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" showdoc/ \n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-t")]),s._v(" showdoc ./ \n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" showdoc "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4999")]),s._v("：80 showdoc \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("注意: 如果想在不同端口启动，请修改4999为其他端口。")])]),s._v(" "),a("p",[s._v("（7）访问ShowDoc 在浏览器中输入网址http://192.168.132.132:4999/install/")]),s._v(" "),a("p",[s._v("然后按照提示信息删除/install目录，使用如下命令进行删除\n（其中的XXX为install路径）。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-rf")]),s._v("  XXX/install\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("（8）备份\nAPI文档是非常重要的文档，需定期备份。/XXX/showdoc/Sqlite\n下面有个showdoc.db.php文件，定期备份该文件即可。")]),s._v(" "),a("p",[s._v("用户可以采用手动命令备份，使用如下mv命令。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("e.g. "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" /XXX/showdoc/Sqlite/showdoc.db.php /test/showdoc.db.php.bak \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面示例将showdoc.db.php文件重命名为showdoc.db.php.bak文 件保存在/test目录下，也可以编写自动化备份脚本定期备份，此处不 做过多介绍。")]),s._v(" "),a("blockquote",[a("p",[s._v("注：Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用及依赖包到一个可移植的容器中，然后发布到Linux系统上，也 可以实现虚拟化。容器完全使用沙箱机制，相互之间不会有任何接口。")])]),s._v(" "),a("p",[s._v("一个完整的API文档应该包含以下几部分。\n① 接口名称。\n② 简要描述。\n③ 请求的URL。\n④ 请求方式（GET / POST等）。\n⑤ 请求参数（参数名、是否必选、参数类型、说明）。\n⑥ 返回示例。\n⑦ 返回参数说明（参数名、类型、说明）。\n⑧ 备注及责任人。")]),s._v(" "),a("h2",{attrs:{id:"postman工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#postman工具"}},[s._v("#")]),s._v(" Postman工具")]),s._v(" "),a("h4",{attrs:{id:"postman的下载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#postman的下载"}},[s._v("#")]),s._v(" "),a("strong",[s._v("postman的下载")])]),s._v(" "),a("p",[s._v("postman是一个接口测试工具，非常好用，前后端，还有测试人员都在使用它。")]),s._v(" "),a("p",[s._v("怎么使用网上有很多教程不在赘述。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.getpostman.com/downloads/",target:"_blank",rel:"noopener noreferrer"}},[s._v("官网下载：https://www.getpostman.com/downloads/"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"newman"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#newman"}},[s._v("#")]),s._v(" Newman")]),s._v(" "),a("p",[s._v("Newman是Postman的命令行集合运行器。它允许用户直接从命令行\n运行和测试Postman集合。它是基于可扩展性而构建的，因此用户可以\n轻松地将其与持续集成服务器和构建系统集成。\nNewman与Postman保持了功能对等，用户可以使用Newman执行所有\n针对集合的操作。")]),s._v(" "),a("h3",{attrs:{id:"安装newman"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装newman"}},[s._v("#")]),s._v(" 安装Newman")]),s._v(" "),a("p",[s._v("Newman是建立在Node.js上的。要运行Newman，需要事先安装 Node.js。根据操作系统（Linux、Windows、Mac OS）下载和安装对应 的Node.js。")]),s._v(" "),a("p",[s._v("（1）所以你要先安装Node.js")]),s._v(" "),a("p",[s._v("（2）借助npm工具，可以通过下面的命令安装Newman。")]),s._v(" "),a("p",[s._v("注意，需要使用 “-g”参数来全局安装Newman，这将允许用户从任何地方运行它。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-g")]),s._v(" newman\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("（3）运行Newman 通过Newman来运行集合是非常简单的一件事情，直接运行你从postman导出的集合文件，格式为JSON。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("newman run mycollection.json\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"centos-linux-下安装newman"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#centos-linux-下安装newman"}},[s._v("#")]),s._v(" CentOS（Linux）下安装Newman")]),s._v(" "),a("p",[s._v("（1）安装Node.js和npm\n在CentOS上一般通过yum（CentOS的包管理工具）来安装Node.js和npm，在此之前需要先给yum添加epel和remi源。")]),s._v(" "),a("p",[s._v("① 添加epel源。\n64位系统添加命令如下。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rpm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ivh")]),s._v(" http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.\nnoarch.rpm\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("32位系统添加命令如下。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rpm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ivh")]),s._v(" http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.\nnoarch.rpm\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("导入键的命令如下。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rpm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--import")]),s._v(" /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("② 添加remi源。\n具体命令如下。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rpm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ivh")]),s._v(" http://rpms.famillecollet.com/enterprise/remi-release-6.rpm\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rpm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--import")]),s._v(" /etc/pki/rpm-gpg/RPM-GPG-KEY-remi\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("（2）安装完成后，执行具体命令如下。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--silent")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--location")]),s._v("\nhttps://rpm.nodesource.com/setup_5.x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-yum")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-y")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" nodejs\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("（3）全局安装Newman，在Ubuntu中安装Newman\n具体命令如下。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-g")]),s._v(" newman\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"newman选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#newman选项"}},[s._v("#")]),s._v(" Newman选项")]),s._v(" "),a("p",[s._v("Newman提供了一组丰富的选项来定制集合运行。用户可以通过使\n用“- h”参数来查看选项列表，如图5-66所示（图中只截取部分参数\n选项）。")]),s._v(" "),a("p",[s._v("下面演示几个常用参数的用法。")]),s._v(" "),a("p",[s._v("① 使用“-n”参数来设置集合迭代的次数。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("newman run mycollection.JSON "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行集合10次 ")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("② 使用“-d”参数来设置集合使用的数据文件。为了提供不同的 数据集，即每个迭代的变量，可以使用“-d”来指定JSON或CSV文件。 例如，下面是一个JSON格式的数据文件。")]),s._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"url"')]),s._v("： "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://127.0.0.1：5000"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"user_id"')]),s._v("： "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"id"')]),s._v("： "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"token_id"')]),s._v("： "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123123"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"url"')]),s._v("： "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://127.0.0.1：6000"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"user_id"')]),s._v("： "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"id"')]),s._v("： "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"token_id"')]),s._v("： "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"899899"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("使用“-d”参数指定数据文件将运行2次迭代，每次迭代使用一组 变量。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("newman run mycollection.JSON "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" data.JSON \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("对于上面设置的参数如果写成CSV文件，效果如下。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("url, user_id, id, token_id\nhttp://127.0.0.1：5000, 1, 1, 123123123\nhttp://Postman-echo.com, 2, 2, 899899\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如果使用“--bail”参数，当Newman运行良好时，其状态码为0； 当Newman运行失败，其状态码为1。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("newman run PostmanCollection.JSON "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" environment.JSON -- bail newman\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"集合运行排错"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合运行排错"}},[s._v("#")]),s._v(" 集合运行排错")]),s._v(" "),a("p",[s._v("借助Newman运行集合报错的示例，那该如何进行 排错呢？")]),s._v(" "),a("p",[s._v("将测试和请求的结果都导出到一个文件中，然后再导入Postman进 行进一步分析。使用JSON reporter和文件名将运行结果输出保存到一 个文件中。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("newman run mycollection.JSON "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--reporters")]),s._v(" cli,JSON -- reporter-JSON-export outputfile.JSON\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("blockquote",[a("p",[s._v("注意 : Newman允许使用Postman支持的所有库和对象运行测试 和预请求脚本。")])]),s._v(" "),a("h3",{attrs:{id:"定制报告"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定制报告"}},[s._v("#")]),s._v(" 定制报告")]),s._v(" "),a("p",[s._v("如果想根据特定请求生成报告，定制报告就会派上用场，例如， 在请求（或测试）失败时、输出响应主体日志时。")]),s._v(" "),a("ol",[a("li",[s._v("构建定制报告\n定制报告是一个节点模块，其名称为newman-reporter-(name)")])]),s._v(" "),a("p",[s._v("创建一个定制报告的步骤如下。\n① 导航到选择的目录，并使用npm init创建一个空白的npm包。\n② 添加一个index.js文件，导出如下形式的函数。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("emitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" reporterOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("collectionRunOptions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// emitter is is an event emitter that triggers the")]),s._v("\nfollowing events：\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("https")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("Postmanlabs"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("newman#newmanrunevents\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// reporterOptions is an object of the reporter specific")]),s._v("\noptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" See \nusage examples below "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" more details"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// collectionRunOptions is an object of all the")]),s._v("\ncollection run options：\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("https")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("Postmanlabs"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("newman#newmanrunoptions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("object"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("callback\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("run"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("eventemitter\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("③ 使用npm发布报告，或者在本地使用报告。\n另外，也支持如@ myorg/newman-reporter-(name)所示的报告名\n称。")]),s._v(" "),a("p",[s._v("③ 使用npm发布报告，或者在本地使用报告。\n另外，也支持如@ myorg/newman-reporter-（name）所示的报告名\n称。")]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("使用自定义的报告\n为了使用自定义报告，必须先安装对应的报告包。例如，使用\nNewman teamcity reporter的方法如下。\n① 安装reporter包。")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" newman-reporter-teamcity\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("请注意，包的名称为newman -reporter-(name)，其中(name)是reporter的实际名称。如果Postman是全局安装的，则这个包也应该全局安装。运行npm install(包名)，使用“- g”标志进行全局安装。\n② 要使用本地（非公开）的报告，请运行命令npm install\n(path/to/local-reportdirectory)。\n③ 通过CLI或programmatically使用已安装的报告。在这里，在\n选项中指定报告名称时不需要newman-reporter前缀。\n④ 作用域的报告包必须使用范围前缀来指定。例如，如果包名是\n@myorg/newman- reporter- name，必须使用@myorg/ name指定报告。")]),s._v(" "),a("ol",[a("li",[s._v("CLI\n具体命令如下。")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("newman run /path/to/collection.JSON "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-r")]),s._v(" myreporter --\nreporter-myreporter-\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("option-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("option-value"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The option is optional")]),s._v("\nProgrammatically：\nvar newman "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" require"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'newman'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nnewman.run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n collection： "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/path/to/collection.JSON'")]),s._v(",\n reporters： "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'myreporter'")]),s._v(",\n reporter： "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n myreporter： "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'option-name'")]),s._v("： "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'option-value'")]),s._v(" // this is optional\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("err, summary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" throw err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n console.info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'collection run complete!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h2",{attrs:{id:"jenkins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jenkins"}},[s._v("#")]),s._v(" Jenkins")]),s._v(" "),a("p",[s._v("Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。\nJenkins的特点如下。")]),s._v(" "),a("p",[s._v("（1）持续集成和持续交付。\n作为一个可扩展的自动化服务器，Jenkins可以作为一个简单的持续集成（Continuous Integration，CI）服务器，或者成为任何项目的持续交付中心。")]),s._v(" "),a("p",[s._v("（2）安装方便。\nJenkins是一个基于Java的独立程序，包含Windows、Mac OS和其他类UNIX系统的程序包。")]),s._v(" "),a("p",[s._v("（3）简单的配置。\nJenkins可以通过其Web界面轻松地设置和配置，其中包括动态错误检查和内置帮助。")]),s._v(" "),a("p",[s._v("（4）丰富的插件。\n在Jenkins插件中心有数百个插件，Jenkins在持续集成和持续交付工具链中集成了几乎所有的工具。")]),s._v(" "),a("p",[s._v("（5）可扩展。\nJenkins可以通过插件架构进行扩展，这为Jenkins提供了几乎无限的可能性。")]),s._v(" "),a("p",[s._v("（6）分布式。\nJenkins可以轻松地在多台机器上分发工作，帮助用户在多个平台上更快地驱动构建、测试和部署。")]),s._v(" "),a("h3",{attrs:{id:"部署jenkins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署jenkins"}},[s._v("#")]),s._v(" 部署Jenkins")]),s._v(" "),a("p",[s._v("既然需要借助Jenkins来实现持续集成、交付和监控等工作，那么必然需要将其部署在一台7×24小时开机的服务器上，一般来说，这是一台Linux服务器。关于Jenkins的部署方式有很多种，本书讲解通过Tomcat来部署Jenkins。")]),s._v(" "),a("h4",{attrs:{id:"_1-部署tomcat环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-部署tomcat环境"}},[s._v("#")]),s._v(" 1.部署Tomcat环境")]),s._v(" "),a("p",[s._v("① 打开Tomcat官网,下载对应的版本")]),s._v(" "),a("p",[s._v("② 登录Linux服务器，使用wget命令下载该gz包。具体命令格式为“wget”+“图6-3复制的链接地址”。")]),s._v(" "),a("p",[s._v("③ 使用gunzip命令解压gz包。具体格式为“gunzip”+“压缩包名称”。")]),s._v(" "),a("p",[s._v("④ 使用tar命令解压tar包。具体格式为“tar-xvf”+“压缩包名称”。")]),s._v(" "),a("p",[s._v("至此，已经得到一个名为apache-tomcat-9.0.2的文件夹。")]),s._v(" "),a("p",[s._v("⑤ 启动Tomcat。在Tomcat的bin目录下，通过./startup.sh命令 启动Tomcat")]),s._v(" "),a("p",[s._v("⑥ 检查Tomcat服务是否启动成功。访问Tomcat，查看其是否启动 成功，在浏览器输入Linux服务器IP地址，加上8080端口，按下 “Enter”键，看到一个小猫，证明Tomcat启动成功。")]),s._v(" "),a("h4",{attrs:{id:"_2-在tomcat中部署jenkins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-在tomcat中部署jenkins"}},[s._v("#")]),s._v(" 2.在Tomcat中部署Jenkins")]),s._v(" "),a("p",[s._v("① 首先进入Jenkins官网下载Jenkins的war包。")]),s._v(" "),a("p",[s._v("② 重启Tomcat服务。Tomcat会自动解压部署Jenkins，Tomcat启 动完成后，可以看到目录中多了一个jenkins的文件夹")]),s._v(" "),a("p",[s._v("③ 访 问 并 配 置 Jenkins 。 在 浏 览 器 输 入 地 址 ： 192.168.xx.xx:8080/Jenkins，按“Enter”键")]),s._v(" "),a("blockquote",[a("p",[s._v("注意 : 将IP地址替换成你服务器的地址。")])]),s._v(" "),a("p",[s._v("拷贝/root/.jenkins/secrets/initialAdminPassword 的文件内容，将其粘贴“Administrator password”框中，单击 “Continue”按钮")]),s._v(" "),a("p",[s._v("选择安装推荐的插件，需要花费一些时间，等待其自动完成即可。接下来，输入账号信息，创建一个Admin用户（请务必记住账号、 密码），")]),s._v(" "),a("p",[s._v("单击“Save and Finish”按钮，打开Jenkins主页面")]),s._v(" "),a("blockquote",[a("p",[s._v("提示 :  假如修改了Tomcat的HTTP访问端口，需要用如下命令 开启防火墙允许端口访问。 iptables -I INPUT -p tcp --dport 8899 -j ACCEPT")])]),s._v(" "),a("h4",{attrs:{id:"_3-在windows系统上部署jenkins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-在windows系统上部署jenkins"}},[s._v("#")]),s._v(" 3.在Windows系统上部署Jenkins")]),s._v(" "),a("p",[s._v("① 进入Jenkins官网，下载Windows系统的Jenkins安装包,下载文件为.zip压缩包，解压后得到一个.msi文件，双击安装即 可。")]),s._v(" "),a("p",[s._v("② 通过浏览器访问Jenkins，并完成部署，步骤与在Tomcat中部 署类似。")]),s._v(" "),a("h3",{attrs:{id:"管理插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理插件"}},[s._v("#")]),s._v(" 管理插件")]),s._v(" "),a("p",[s._v("Jenkins提供了数百个插件来支持构建、部署和自动化任何项目。 下面介绍管理Jenkins插件的方法。 登录Jenkins后，找到插件管理。")]),s._v(" "),a("p",[s._v("选择“系统管理”→“管理插件”选项，进入“插件管理”界面")]),s._v(" "),a("h4",{attrs:{id:"安装插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装插件"}},[s._v("#")]),s._v(" 安装插件")]),s._v(" "),a("p",[s._v("打开“可选插件”选项卡，在过滤框中搜索关键字，这里以安装 Python插件为例，搜索关键字“Python”，选中插件左侧的复选框， 单击“直接安装”按钮")]),s._v(" "),a("p",[s._v("选中“安装完成后重启Jenkins（空闲时）”复选框")]),s._v(" "),a("p",[s._v("这样Jenkins会在插件安装完成后，空闲时自动重启，以使新安装 的插件生效。因此，用户只需等待Jenkins重启完成即可")]),s._v(" "),a("h4",{attrs:{id:"更新插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新插件"}},[s._v("#")]),s._v(" 更新插件")]),s._v(" "),a("p",[s._v("进入“可更新”选项卡，选中可更新插件，单击“下载待重启后 安装”按钮")]),s._v(" "),a("p",[s._v("选中“安装完成后重启Jenkins（空闲时）”复选框，插件安装完 成后，自动重启Jenkins")]),s._v(" "),a("h4",{attrs:{id:"删除插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除插件"}},[s._v("#")]),s._v(" 删除插件")]),s._v(" "),a("p",[s._v("进入“已安装”选项卡，单击要卸载插件右方的“卸载”按钮， 即可完成对应插件的卸载操作")]),s._v(" "),a("h3",{attrs:{id:"创建项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建项目"}},[s._v("#")]),s._v(" 创建项目")]),s._v(" "),a("h3",{attrs:{id:"配置项目运行频率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置项目运行频率"}},[s._v("#")]),s._v(" 配置项目运行频率")]),s._v(" "),a("h3",{attrs:{id:"配置邮件发送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置邮件发送"}},[s._v("#")]),s._v(" 配置邮件发送")]),s._v(" "),a("h2",{attrs:{id:"git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[s._v("#")]),s._v(" Git")]),s._v(" "),a("p",[s._v("安装Git")]),s._v(" "),a("h3",{attrs:{id:"在linux系统上安装git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在linux系统上安装git"}},[s._v("#")]),s._v(" 在Linux系统上安装Git")]),s._v(" "),a("p",[s._v("以CentOS系统为例，推荐使用yum包管理工具来安装Git，命令如 下。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("安装完成后，输入“git”，按“Enter”键")]),s._v(" "),a("p",[s._v("在安装完Git后，应该做的第一件事就是设置用户名和邮件地址。\n这样做很重要，因为每次Git的提交都会用到这些信息。设置的命令如\n下。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--global")]),s._v(" user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"APITest"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--global")]),s._v(" user.email apitest100@163.com\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如上面命令所示，设置了用户名为“APITest”，对应的邮箱为“apitest100@163.com”。如果想检查你的配置，可以使用下面的命\n令。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--list")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\nuser.name=APITest\nuser.email=apitest100@163.com\ncore.repositoryformatversion=0\ncore.filemode=true\ncore.bare=false\ncore.logallrefupdates=true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"搭建gitlab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建gitlab"}},[s._v("#")]),s._v(" 搭建GitLab")]),s._v(" "),a("p",[s._v("GitLab是Git的开源本地解决方案，对于想保密又不愿花钱的团队\n来说，这是一个良好的解决方案。")]),s._v(" "),a("h3",{attrs:{id:"安装和配置必要的依赖项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装和配置必要的依赖项"}},[s._v("#")]),s._v(" 安装和配置必要的依赖项")]),s._v(" "),a("p",[s._v("使用下面的命令安装必要的依赖项和在系统防火墙打开HTTP和SSH\n访问权限（以CentOS 7系统为例）。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-y")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" policycoreutils-python opensshserver\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" sshd\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl start sshd\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" firewall-cmd "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--permanent")]),s._v(" --add-service"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("http\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl reload firewalld\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("接下来，安装Postfix以发送通知邮件。如果想使用另一个解决方案来发送电子邮件，请跳过此步骤，并在安装了GitLab之后配置一个外部SMTP服务器。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" postfix\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" postfix\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl start postfix\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("在Postfix 安装期间，可能出现配置弹窗，选择 “Internet\nSite”，按“Enter”键，输入邮箱地址，按“Enter”键。如果还有\n其他弹窗，继续按“Enter”键即可。")]),s._v(" "),a("h3",{attrs:{id:"添加gitlab包存储库并安装包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加gitlab包存储库并安装包"}},[s._v("#")]),s._v(" 添加GitLab包存储库并安装包")]),s._v(" "),a("p",[s._v("添加GitLab包存储库的语句如下。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/\nscript.rpm.sh "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v('接下来，安装GitLab包。将URL（http://gitlab.example.com）\n替换成将来你想访问GitLab的地址。安装将自动配置并在该URL启动\nGitLab。\nsudo EXTERNAL_URL="http://gitlab.example.com" yum install -y\ngitlab-ee')]),s._v(" "),a("h3",{attrs:{id:"浏览到主机名和登录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览到主机名和登录"}},[s._v("#")]),s._v(" 浏览到主机名和登录")]),s._v(" "),a("p",[s._v("在第一次访问时，系统将会打开一个密码重置页面，为初始管理员账号提供密码，用户将被重定向回登录页面，然后使用默认账号root登录。")]),s._v(" "),a("h2",{attrs:{id:"钉钉"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#钉钉"}},[s._v("#")]),s._v(" 钉钉")]),s._v(" "),a("p",[s._v("使用Jenkins的钉钉插件能更方 便地接收和处理项目构建信息。")]),s._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[s._v("笔记")]),s._v(" "),a("p",[s._v("待续。。。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);